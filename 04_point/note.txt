Graphics Pipeline
- 그림이 그려지는 과정
    1. application: 그리고 싶은 정점의 위치/ 색상 등을 입력함
        삼각형; 3d 그래픽스에서 기본 입력단위 (c.f., 2d는 픽셀단위)
        픽셀 단위로 3d 그래픽스를 구성하면 컴퓨터 RSS를 매우 많이 소모하게 됨.
    2. geometry processing: 정점(vertex) 단위의 처리, 정점의 위치를 결정함
        입력된 삼각형을 가상의 카메라로 특정 각도에서 촬영을 했을때, 
        입력된 삼각형은 화면의 어떤 위치에 있는지를 계산하는 단계
    3. resterization: 정점 단위로 구성된 삼각형을 픽셀 단위로 변경
        위치 계산 후에 삼각형을 픽셀로 변경을 해주는 것 (모니터는 2d니까)
    4. pixel processing: 픽셀 단위의 처리. 픽셀 색상의 결정
        각각의 픽셀의 색상을 처리 함 

*application 단이 프로그램의 영역, OpenGL 함수 호출을 함
그 외 나머지가 GPU의 영역이다.


!!그러나!!
현대의 Graphics Pipeline은 기존의 pipeline과는 다르다. 
(기존의 pipeline은 고정된 역할과 고정된 프로그램만 사용했기 때문에 그림 자체가 전형적이었음)
openGL 2.0 이후에서부터는 프로그래머가 직접 만든 코드와 함께 그림 그리는 style을 변경할 수 있게 됨 (stylizing)

-> . 그런 파이프라인을 programmable shader라고 부름. 
1.  shader: 각 파이프라인 단계마다 GPU 상에서 실행되는 작은 프로그램
    GLSL(GL Shading Language) 라는 C기반 프로그래밍 언어로 작성

    *이전에는 이게 standard pipeline을 사용하거나 커스텀을 하는 둥 option이었는데 지금은 필수가 됨.
    즉, standard pipeline은 더 이상 표준이 아니다! 

OpenGL Shader
- gl은 그림을 그려내기 위해 두 개의 shader가 반드시 필요하다.
    1. vertex shader: 각 정점의 위치를 계산하는 부분을 담당함 
    2. fragment shader: 픽셀 별로 수행(pixel processing)하는 것을 담당함.
- shader 코드는 gl 코드 내에서 빌드/로딩이 된다. 



Smart pointer
- C++ 11부터 사용 가능한 '좀 더 안전한' 포인터
- 메모리 할당을 받을 때 '소유권에 대한 정보가 있다'
- 명시적인 delete 구문이 필요가 없음
    - std::unique_ptr<>; 해당 메모리 블록을 단독으로 소유
        1. 소유권을 가진 instance가 scope 밖으로 벗어났을때 메모리 자동 해제 (local var처럼 됨)
        2. 소유권을 가진 instance가 일반적인 포인터처럼 다른 쪽에 소유권에 이전하려는 경우 에러 발생
            std::unique_ptr<int> a = std::make_unique();
            std::unique_ptr<int> b = a; --> complie err 발생 
        3. std::move() 함수를 사용해서 명시적으로 소유권 이전 가능. 대신 이전에 소유권을 가진 인스턴스는 nullptr를 갖게됨
            std::unique_ptr<int> b = std::move(a);
        
    - std::shared_ptr<>; 해당 메모리 블록의 소유권을 공유
    - std::weak_ptr<>; 해당 메모리 소유권은 없지만 접근은 가능

일반 포인터 문제케이스
- 반드시 메모리 해제를 해줘야 함; delete 메모리 블록만큼의 mem leak이 발생
- 메모리를 두번 해제하면 문제 발생; double free problem -> 프로그램 죽을 가능성


Program class design
- program 클래스 설계
    - vertex shader, fragment shader를 연결한 pipeline program
    - 이 program을 이용해서 최종적으로 그림을 그린다.
    - 두 개의 shader를 입력 받아서 program을 링크시긴다
    - 링크에 성공하면 OpenGL program object를 생성
    - 실패하면 메모리 할당 해제를

코드 리팩토링 
- 프로그램 라이프사이클을 고려하여 코드 리팩토링
    - GLFW / OpenGL Context / GLAD 초기화
    - 그림을 그리기 위한 OpenGL objects 생성 (shader / program)
    - 렌더링
    - OpenGL objects 제거
    - GLFW 종료 / 프로그램 종료
- OpenGL object 들을 관리하고 렌더링하는 코드를 분리하자


삼각형 그리기 위한 정점 입력
정점을 3개 입력하여 삼각형을 그려보자
    정점 데이터 준비
    Vertex buffer object (VBO) 준비
    Vertex buffer object에 정점 데이터 입력
        CPU memory 상에 있는 정점 데이터를 GPU로 옮기는 작업
    Vertex array object (VAO) 준비
        우리의 정점 데이터의 구조를 알려주는 descriptor object
    Program, VBO, VAO를 사용하여 그림 그리기